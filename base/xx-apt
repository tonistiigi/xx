#!/usr/bin/env sh

set -e

if [ -z "$XX_APT_NOLOCK" ]; then
  lock="/var/lock/xx-apt"
  exec 9>$lock
  flock -x 9
  export XX_APT_NOLOCK=1
fi

if [ -n "$XX_DEBUG_APT" ]; then
  set -x
fi

for l in $(xx-info env); do
  export "${l?}"
done

checkpkg() {
  apt show "$@"
}

exitnolinux() {
  if [ "${TARGETOS}" != "linux" ]; then
    echo >&2 "skipping packages installation on ${XX_OS}"
    exit 0
  fi
}

# these are not supported yet
case "${TARGETARCH}" in
  mips*)
    echo >&2 "skipping packages installation on ${XX_ARCH}"
    exit 0
    ;;
  riscv*)
    case "${XX_VENDOR}" in
      debian)
        if ! grep "sid main" /etc/apt/sources.list >/dev/null; then
          echo >&2 "skipping packages installation on ${XX_ARCH}. riscv64 currently only supported on sid"
          exit 0
        fi
        ;;
      ubuntu)
        if ! grep 'VERSION="2' /etc/os-release >/dev/null 2>/dev/null; then
          echo >&2 "skipping packages installation on ${XX_ARCH}. riscv64 requires 20.04+"
          exit 0
        fi
        ;;
    esac
    ;;
  *) ;;

esac

arg0="$(basename "$0")"
if [ "$arg0" = "xx-apt-get" ]; then
  arg0="apt-get"
else
  arg0="apt"
fi

setaptsources() {
  file=$1
  arch=$2
  mainuri=$3
  securi=$4
  # shellcheck disable=SC1091
  release=$(. /etc/os-release && echo "$UBUNTU_CODENAME")
  cat >"$file" <<EOL
deb [arch=$arch] $mainuri $release main restricted universe multiverse
deb [arch=$arch] $mainuri $release-updates main restricted universe multiverse
deb [arch=$arch] $mainuri $release-backports main restricted universe multiverse
deb [arch=$arch] $securi $release-security main restricted universe multiverse
EOL
}

fixubuntusources() {
  nocross=$1
  # fix all current sources to native arch
  nativearch="$(TARGETPLATFORM="" TARGETPAIR="" TARGETARCH="" TARGETOS="" xx-info arch)"
  case "${nativearch}" in
    amd64 | i386)
      setaptsources "/etc/apt/sources.list" "$nativearch" "http://archive.ubuntu.com/ubuntu/" "http://security.ubuntu.com/ubuntu/"
      ;;
    *)
      setaptsources "/etc/apt/sources.list" "$nativearch" "http://ports.ubuntu.com/ubuntu-ports/" "http://ports.ubuntu.com/ubuntu-ports/"
      ;;
  esac
  debarch=$(xx-info debian-arch)
  if [ -z "$nocross" ]; then
    case "${debarch}" in
      amd64 | i386)
        setaptsources "/etc/apt/sources.list.d/port-$debarch.list" "$debarch" "http://archive.ubuntu.com/ubuntu/" "http://security.ubuntu.com/ubuntu/"
        ;;
      *)
        setaptsources "/etc/apt/sources.list.d/port-$debarch.list" "$debarch" "http://ports.ubuntu.com/ubuntu-ports/" "http://ports.ubuntu.com/ubuntu-ports/"
        ;;
    esac
  fi
}

packages=
parsed=
n=$#
for p in "$@"; do
  if [ $# = $n ]; then set --; fi
  arg=
  case "$p" in
    -*)
      arg="$p"
      ;;
    "install" | "remove" | "search" | "show" | "list" | "info")
      parsed=1
      arg="$p"
      ;;
    *)
      if [ -n "$parsed" ]; then
        if [ -z "${packages}" ]; then
          packages="$p"
        else
          packages="${packages} ${p}"
        fi
      else
        arg="$p"
      fi
      ;;
  esac
  if [ -n "$arg" ]; then
    set -- "$@" "$arg"
  fi
done

if [ -z "${parsed}" ]; then
  exitnolinux
  exec apt "$@"
fi

nocross=
if ! xx-info is-cross; then
  nocross=1
fi

if [ "$TARGETARCH" = "riscv64" ] && [ "$(xx-info vendor)" = "debian" ]; then
  apt-get update
  apt-get install -y debian-ports-archive-keyring
  echo "deb [ arch=riscv64 ] http://ftp.ports.debian.org/debian-ports sid main" >>/etc/apt/sources.list.d/riscv64-sid.list
fi

if ! dpkg --print-foreign-architectures | grep "$XX_PKG_ARCH" >/dev/null; then
  if [ "$XX_OS" = "linux" ]; then
    if [ "$(xx-info vendor)" = "ubuntu" ]; then
      # ubuntu uses different repositories for amd64/386 and rest of the architectures
      # so we need to fix the sources.list and add new ones
      fixubuntusources "$nocross"
    fi

    dpkg --add-architecture "$XX_PKG_ARCH"
  fi
  apt-get update
fi

suffix=$XX_TRIPLE
if [ "$suffix" = "x86_64-linux-gnu" ]; then
  suffix="x86-64-linux-gnu"
fi
if [ "$XX_OS" = "windows" ]; then
  case "$XX_ARCH" in
    amd64) suffix="mingw-w64-x86-64" ;;
    386) suffix="mingw-w64-i686" ;;
    arm64) suffix="mingw-w64-aarch64" ;;
    arm) suffix="mingw-w64-arm" ;;
  esac
fi

packages2=
for p in ${packages}; do
  if [ "${p}" = "xx-c-essentials" ]; then
    p="libc6-dev"
    if "$arg0" info "libgcc-10-dev:${XX_PKG_ARCH}" >/dev/null 2>/dev/null; then
      p="$p libgcc-10-dev"
    else
      p="$p libgcc-8-dev"
    fi
  elif [ "${p}" = "xx-cxx-essentials" ]; then
    if "$arg0" info "libstdc++-10-dev:${XX_PKG_ARCH}" >/dev/null 2>/dev/null; then
      p="libstdc++-10-dev"
    else
      p="libstdc++-8-dev"
    fi
  fi
  if [ -z "$packages2" ]; then
    packages2="$p"
  else
    packages2="${packages2} $p"
  fi
done

empty=1
for p in ${packages2}; do
  n=
  if [ -n "$nocross" ]; then
    n=${p}
  elif checkpkg "${p}-${suffix}" >/dev/null 2>/dev/null; then
    n="${p}-${suffix}"
  elif [ "${XX_OS}" = "linux" ] && [ -n "${XX_APT_PREFER_CROSS}" ] && checkpkg "${p}-${XX_PKG_ARCH}-cross" >/dev/null 2>/dev/null; then
    n="${p}-${XX_PKG_ARCH}-cross"
  elif [ "${XX_OS}" = "linux" ]; then
    n="${p}:${XX_PKG_ARCH}"
  else
    continue
  fi
  empty=
  set -- "$@" "$n"
done

if [ -n "$empty" ]; then
  exitnolinux
fi

echo >&2 "+ $arg0 " "$@"
exec "$arg0" "$@"
