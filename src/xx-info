#!/usr/bin/env sh

: "${TARGETPLATFORM=}"
: "${TARGETOS=}"
: "${TARGETARCH=}"
: "${TARGETVARIANT=}"
: "${MACOSX_VERSION_MIN=}"

: "${XX_MARCH=unknown}"
# https://pkgs.alpinelinux.org/packages
: "${XX_ALPINE_ARCH=unknown}"
# https://www.debian.org/ports/
: "${XX_DEBIAN_ARCH=unknown}"
# https://docs.fedoraproject.org/ro/Fedora_Draft_Documentation/0.1/html/RPM_Guide/ch01s03.html
: "${XX_RHEL_ARCH=unknown}"
: "${XX_OS_VERSION=}"
: "${XX_TRIPLE=unknown-unknown-none}"
: "${XX_VENDOR=}"
: "${XX_LIBC=}"

usage() {
  cat >&2 <<EOT
Usage: $(basename "$0") [COMMAND]

Commands:
  alpine-arch    Print target architecture for Alpine package repositories
  arch           Print target architecture for Docker
  debian-arch    Print target architecture for Debian/Ubuntu package repositories
  env            Print XX_* variables defining target environment
  is-cross       Exit cleanly if target is not native architecture
  libc           Print used libc (musl or gnu)
  march          Print target machine architecture, uname -m
  os             Print target operating system (linux,darwin,windows,wasi)
  os-version     Print operating system version
  pkg-arch       Print either alpine-arch or debian-arch
  rhel-arch      Print target architecture for RPM package repositories
  sysroot        Print sysroot directory for target architecture
  triple         Print target triple in arch[-vendor]-os-abi form
  vendor         Print vendor part of target triple
  variant        Print target variant if architecture is arm (eg. v7)

EOT
  exit 0
}

set -e

macos_sdk_path=/xx-sdk/MacOSX11.1.sdk
detectMacOSSDK() {
  if [ -d "/xx-sdk" ]; then
    for f in /xx-sdk/MacOSX*.sdk; do
      macos_sdk_path="$f"
      break
    done
  fi
}

# TARGETPAIR is an optional alternative format $TARGETOS-$TARGETARCH$TARGETVARIANT, eg linux-amd64, linux-armv7
# This format is recommended to be used in image and binary names where slashes are not allowed.
# Architecture and variant component are not separated with a dash to automatically handle empty value.
if [ -n "$TARGETPAIR" ]; then
  os="$(echo "$TARGETPAIR" | cut -d"-" -f1)"
  arch="$(echo "$TARGETPAIR" | cut -d"-" -f2)"
  if [ "${arch#armv}" != "${arch}" ]; then
    variant="${arch#arm}"
    arch="arm"
  fi
  if [ -n "$os" ] && [ -n "$arch" ]; then
    TARGETOS="$os"
    TARGETARCH="$arch"
    if [ -n "$variant" ]; then
      TARGETVARIANT="$variant"
    fi
  fi
fi

# break up TARGETPLATFORM if provided
if [ -n "$TARGETPLATFORM" ]; then
  os="$(echo $TARGETPLATFORM | cut -d"/" -f1)"
  arch="$(echo $TARGETPLATFORM | cut -d"/" -f2)"
  if [ -n "$os" ] && [ -n "$arch" ]; then
    TARGETOS="$os"
    TARGETARCH="$arch"
    case "$arch" in
      "arm")
        case "$(echo $TARGETPLATFORM | cut -d"/" -f3)" in
          "v5")
            TARGETVARIANT="v5"
            ;;
          "v6")
            TARGETVARIANT="v6"
            ;;
          "v8")
            TARGETVARIANT="v8"
            ;;
          *)
            TARGETVARIANT="v7"
            ;;
        esac
        ;;
      "mips"*)
        TARGETVARIANT="$(echo $TARGETPLATFORM | cut -d"/" -f3)"
        ;;
    esac
  fi
fi

distro=""
# detect distro vendor
# shellcheck disable=SC1091
if . /etc/os-release 2>/dev/null; then
  distro=$ID
  XX_OS_VERSION=$VERSION_ID
fi

vendor=""
if [ -z "$XX_VENDOR" ]; then
  if [ -n "$distro" ]; then
    XX_VENDOR="$distro"
  fi
  if [ "$TARGETOS" = "darwin" ]; then
    XX_VENDOR="apple"
  fi
  if [ -z "$XX_VENDOR" ]; then
    XX_VENDOR="unknown"
  fi
fi
case "$XX_VENDOR" in
  debian | ubuntu | rhel | fedora | centos | rocky | ol) ;;
  *) vendor="-${XX_VENDOR}" ;;
esac

if [ -z "$XX_LIBC" ]; then
  if [ "$distro" = "alpine" ]; then
    XX_LIBC="musl"
  else
    XX_LIBC="gnu"
  fi
  if [ "$TARGETOS" = "windows" ]; then
    XX_LIBC="mingw32"
  fi
fi

# reverse lookup if no parameters given
if [ -z "$TARGETARCH" ]; then
  case "$(uname -m)" in
    "x86_64")
      TARGETARCH="amd64"
      ;;
    "i386")
      TARGETARCH="386"
      ;;
    "aarch64")
      TARGETARCH="arm64"
      ;;
    "arm64")
      TARGETARCH="arm64"
      ;;
    "armv7l")
      TARGETARCH="arm"
      TARGETVARIANT="v7"
      ;;
    "armv6l")
      TARGETARCH="arm"
      TARGETVARIANT="v6"
      ;;
    "armv5l")
      TARGETARCH="arm"
      TARGETVARIANT="v5"
      ;;
    "riscv64")
      TARGETARCH="riscv64"
      ;;
    "ppc64le")
      TARGETARCH="ppc64le"
      ;;
    "s390x")
      TARGETARCH="s390x"
      ;;
    "mips")
      TARGETARCH="mips"
      ;;
    "mipsle")
      TARGETARCH="mipsle"
      ;;
    "mips64")
      TARGETARCH="mips64"
      ;;
    "mips64le")
      TARGETARCH="mips64le"
      ;;
    "loongarch64")
      TARGETARCH="loong64"
      ;;
  esac
fi

if [ -z "$TARGETOS" ]; then
  TARGETOS="linux"
fi

if [ "$TARGETARCH" = "arm" ] && [ -z "$TARGETVARIANT" ]; then
  TARGETVARIANT="v7"
fi

if [ "$TARGETOS" = "darwin" ] && [ -z "$MACOSX_VERSION_MIN" ]; then
  if [ "$TARGETARCH" = "amd64" ]; then
    MACOSX_VERSION_MIN=10.6
  else
    MACOSX_VERSION_MIN=10.16
  fi
fi

case "$TARGETARCH" in
  "amd64")
    XX_MARCH="x86_64"
    XX_DEBIAN_ARCH="amd64"
    XX_ALPINE_ARCH="x86_64"
    XX_RHEL_ARCH="x86_64"
    XX_TRIPLE="x86_64${vendor}-linux-${XX_LIBC}"
    if [ "$TARGETOS" = "darwin" ]; then
      XX_TRIPLE="x86_64${vendor}-macos${MACOSX_VERSION_MIN}"
    elif [ "$TARGETOS" = "windows" ]; then
      XX_TRIPLE="x86_64-w64-mingw32"
    fi
    ;;
  "arm64")
    XX_MARCH="aarch64"
    XX_DEBIAN_ARCH="arm64"
    XX_ALPINE_ARCH="aarch64"
    XX_RHEL_ARCH="aarch64"
    XX_TRIPLE="aarch64${vendor}-linux-${XX_LIBC}"
    if [ "$TARGETOS" = "darwin" ]; then
      XX_MARCH="arm64"
      XX_TRIPLE="arm64${vendor}-macos${MACOSX_VERSION_MIN}"
    elif [ "$TARGETOS" = "windows" ]; then
      XX_TRIPLE="aarch64-w64-mingw32"
    fi
    ;;
  "arm")
    XX_MARCH="armv7l"
    XX_DEBIAN_ARCH="armhf"
    XX_ALPINE_ARCH="armv7"
    XX_RHEL_ARCH="armv7hl"
    triplearch="arm"
    if [ -n "$ARM_TARGET_ARCH" ]; then
      triplearch="${ARM_TARGET_ARCH}"
    elif [ "$XX_VENDOR" = "alpine" ]; then
      triplearch="armv7"
    fi
    XX_TRIPLE="${triplearch}${vendor}-linux-${XX_LIBC}eabihf"
    if [ "$TARGETVARIANT" = "v6" ]; then
      XX_MARCH="armv6l"
      XX_DEBIAN_ARCH="armel"
      XX_ALPINE_ARCH="armhf"
      XX_RHEL_ARCH="armv6hl"
      XX_TRIPLE="arm${vendor}-linux-${XX_LIBC}eabi"
      if [ "$XX_VENDOR" = "alpine" ]; then
        XX_TRIPLE="armv6${vendor}-linux-${XX_LIBC}eabihf"
      fi
    fi
    if [ "$TARGETVARIANT" = "v5" ]; then
      XX_MARCH="armv5l"
      XX_DEBIAN_ARCH="armel"
      XX_ALPINE_ARCH="armel" # alpine does not actually support v5
      XX_RHEL_ARCH="armv5tel"
      XX_TRIPLE="arm${vendor}-linux-${XX_LIBC}eabi"
      if [ "$XX_VENDOR" = "alpine" ]; then
        XX_TRIPLE="armv5${vendor}-linux-${XX_LIBC}eabi"
      fi
    fi

    if [ "$TARGETOS" = "windows" ]; then
      XX_TRIPLE="armv7-w64-mingw32"
    fi
    ;;
  "riscv64")
    XX_MARCH="riscv64"
    XX_DEBIAN_ARCH="riscv64"
    XX_ALPINE_ARCH="riscv64"
    XX_RHEL_ARCH="riscv64"
    triplearch="riscv64"
    if [ -n "$RISCV64_TARGET_ARCH" ]; then
      triplearch="${RISCV64_TARGET_ARCH}"
    fi
    XX_TRIPLE="${triplearch}${vendor}-linux-${XX_LIBC}"
    ;;
  "ppc64le")
    XX_MARCH="ppc64le"
    XX_DEBIAN_ARCH="ppc64el"
    XX_ALPINE_ARCH="ppc64le"
    XX_RHEL_ARCH="ppc64le"
    XX_TRIPLE="powerpc64le${vendor}-linux-${XX_LIBC}"
    ;;
  "s390x")
    XX_MARCH="s390x"
    XX_DEBIAN_ARCH="s390x"
    XX_ALPINE_ARCH="s390x"
    XX_RHEL_ARCH="s390x"
    XX_TRIPLE="s390x${vendor}-linux-${XX_LIBC}"
    ;;
  "386")
    XX_MARCH="i386"
    XX_DEBIAN_ARCH="i386"
    XX_ALPINE_ARCH="x86"
    XX_RHEL_ARCH="i386"
    XX_TRIPLE="i686${vendor}-linux-${XX_LIBC}"
    if [ "$XX_VENDOR" = "alpine" ]; then
      XX_TRIPLE="i586${vendor}-linux-${XX_LIBC}"
    fi
    if [ "$TARGETOS" = "windows" ]; then
      XX_TRIPLE="i686-w64-mingw32"
    fi
    ;;
  "mips")
    XX_MARCH="mips"
    XX_DEBIAN_ARCH="mips"
    XX_ALPINE_ARCH="mips"
    XX_RHEL_ARCH="mips"
    XX_TRIPLE="mips${vendor}-linux-${XX_LIBC}"
    ;;
  "mipsle")
    XX_MARCH="mipsle"
    XX_DEBIAN_ARCH="mipsel"
    XX_ALPINE_ARCH="mipsle"
    XX_RHEL_ARCH="mipsel"
    XX_TRIPLE="mipsel${vendor}-linux-${XX_LIBC}"
    ;;
  "mips64")
    XX_MARCH="mips64"
    XX_DEBIAN_ARCH="mips64"
    XX_ALPINE_ARCH="mips64"
    XX_RHEL_ARCH="mips64"
    XX_TRIPLE="mips64${vendor}-linux-${XX_LIBC}abi64"
    ;;
  "mips64le")
    XX_MARCH="mips64le"
    XX_DEBIAN_ARCH="mips64el"
    XX_ALPINE_ARCH="mips64le"
    XX_RHEL_ARCH="mips64el"
    XX_TRIPLE="mips64el${vendor}-linux-${XX_LIBC}abi64"
    ;;
  "loong64")
    XX_MARCH="loong64"
    XX_DEBIAN_ARCH="loong64"
    XX_ALPINE_ARCH="loong64"
    XX_RHEL_ARCH="loong64"
    XX_TRIPLE="loong64${vendor}-linux-${XX_LIBC}abi"
    ;;

esac

XX_PKG_ARCH=$TARGETARCH

case "$XX_VENDOR" in
  debian | ubuntu)
    XX_PKG_ARCH=${XX_DEBIAN_ARCH}
    ;;
  alpine)
    XX_PKG_ARCH=${XX_ALPINE_ARCH}
    ;;
  rhel | fedora | centos | rocky | ol)
    XX_PKG_ARCH=${XX_RHEL_ARCH}
    ;;
esac

case "$1" in
  "is-cross")
    if [ "$XX_MARCH" = "$(uname -m)" ] && [ "$TARGETOS" = "linux" ]; then
      exit 1
    else
      exit 0
    fi
    ;;
  "arch")
    echo $TARGETARCH
    ;;
  "variant")
    echo $TARGETVARIANT
    ;;
  "os")
    echo $TARGETOS # TODO:
    ;;
  "os-version")
    echo "$XX_OS_VERSION"
    ;;
  "march")
    echo $XX_MARCH
    ;;
  "debian-arch")
    echo $XX_DEBIAN_ARCH
    ;;
  "alpine-arch")
    echo $XX_ALPINE_ARCH
    ;;
  "rhel-arch")
    echo $XX_RHEL_ARCH
    ;;
  "pkg-arch")
    echo $XX_PKG_ARCH
    ;;
  "triple")
    echo "$XX_TRIPLE"
    ;;
  "vendor")
    echo "$XX_VENDOR"
    ;;
  "libc") # this is not abi, just the prefix
    echo $XX_LIBC
    ;;
  "env")
    echo "XX_OS=${TARGETOS}"
    echo "XX_OS_VERSION=${XX_OS_VERSION}"
    echo "XX_ARCH=${TARGETARCH}"
    echo "XX_MARCH=${XX_MARCH}"
    echo "XX_VENDOR=${XX_VENDOR}"
    if [ "$TARGETOS" = "linux" ]; then
      echo "XX_PKG_ARCH=${XX_PKG_ARCH}"
    fi
    echo "XX_TRIPLE=${XX_TRIPLE}"
    echo "XX_LIBC=${XX_LIBC}"
    echo "TARGETOS=${TARGETOS}"
    echo "TARGETARCH=${TARGETARCH}"
    echo "TARGETVARIANT=${TARGETVARIANT}"
    ;;
  "sysroot")
    sysroot="/"
    if [ -f /etc/alpine-release ] && [ "$XX_MARCH" != "$(uname -m)" ] && [ "$TARGETOS" = "linux" ]; then
      sysroot="/${XX_TRIPLE}/"
    fi
    if [ "$TARGETOS" = "darwin" ]; then
      detectMacOSSDK
      if [ -n "$macos_sdk_path" ]; then
        sysroot="${macos_sdk_path}/"
      fi
    fi
    echo "$sysroot"
    ;;
  "--help")
    usage
    ;;
  "")
    echo "$XX_TRIPLE"
    ;;
  *)
    echo "unknown command $1"
    exit 1
    ;;
esac
