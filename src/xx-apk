#!/usr/bin/env sh

set -e

if [ -z "$XX_APK_NOLOCK" ]; then
  # readlink -f in ash can not resolve symlinks from deep workdir
  cd / >/dev/null
  if [ -L /var/lock ] && [ ! -e "$(readlink -f /var/lock)" ]; then
    mkdir -p "$(readlink -f /var/lock)"
  elif [ ! -d /var/lock ]; then
    mkdir -p /var/lock
  fi
  cd - >/dev/null
  lock="/var/lock/xx-apk"
  exec 9>$lock
  flock -x 9
  export XX_APK_NOLOCK=1
fi

if [ -n "$XX_DEBUG_APK" ]; then
  set -x
fi

unset XX_VENDOR # vendor for installing packages is always alpine

for l in $(xx-info env); do
  export "${l?}"
done

if [ "${TARGETOS}" != "linux" ]; then
  echo >&2 "skipping packages installation on ${XX_OS}"
  exit 0
fi

# these are not supported yet
case "${TARGETARCH}" in
  mips*)
    echo >&2 "skipping packages installation on ${XX_ARCH}"
    exit 0
    ;;
  *) ;;
esac

setup() {
  if ! xx-info is-cross; then
    return
  fi
  done_file="/${XX_TRIPLE}/.xx-setup"
  if [ -f "$done_file" ]; then
    return
  fi
  apk_dir="/${XX_TRIPLE}/etc/apk"
  mkdir -p "$apk_dir"

  cp /etc/apk/repositories "$apk_dir/"

  # riscv supported since alpine 3.20
  if [ "$TARGETARCH" = "riscv64" ] && ! supportRiscV; then
    echo "https://dl-cdn.alpinelinux.org/alpine/v3.20/main" >"$apk_dir/repositories"
    echo "https://dl-cdn.alpinelinux.org/alpine/v3.20/community" >>"$apk_dir/repositories"
  fi
  # loong64 supported since alpine 3.21
  if [ "$TARGETARCH" = "loong64" ] && ! supportLoong64; then
    echo "https://dl-cdn.alpinelinux.org/alpine/v3.21/main" >"$apk_dir/repositories"
    echo "https://dl-cdn.alpinelinux.org/alpine/v3.21/community" >>"$apk_dir/repositories"
  fi
  mkdir -p "$apk_dir/keys"
  mkdir -p "$apk_dir/protected_paths.d"
  echo "$XX_PKG_ARCH" >"$apk_dir/arch"
  apk add --no-cache --initdb -p "/${XX_TRIPLE}" --allow-untrusted alpine-keys

  if [ -d "/etc/apk/cache" ]; then
    mkdir -p "/etc/apk/cache/_$XX_PKG_ARCH"
    ln -s "/etc/apk/cache/_$XX_PKG_ARCH" "$apk_dir/cache"
  fi

  touch "$done_file"
}

clean() {
  if ! xx-info is-cross; then
    return
  fi
  # safety first
  if [ -z "${XX_TRIPLE}" ]; then
    echo >&2 "invalid triple root $XX_TRIPLE"
    exit 1
  fi
  rm -rf "/${XX_TRIPLE:?}"
}

cmd() {
  setup
  root="/"
  if xx-info is-cross; then
    root="/${XX_TRIPLE}"
  fi
  n=$#
  iscompilerrt=
  isrustlib=
  for a in "$@"; do
    if [ $# = $n ]; then set --; fi
    case "$a" in
      "xx-c-essentials")
        set -- "$@" musl-dev gcc
        ;;
      "xx-cxx-essentials")
        set -- "$@" g++
        ;;
      "compiler-rt" | "compiler-rt-static")
        iscompilerrt="$a"
        set -- "$@" "$a"
        ;;
      "rust-stdlib")
        set -- "$@" rust-stdlib
        isrustlib=1
        ;;
      *)
        set -- "$@" "$a"
        ;;
    esac
  done
  if [ "$#" != "0" ]; then
    set -- "--root" "$root" "$@"
    echo "+ apk " "$@"
  fi
  apk "$@"
  if xx-info is-cross; then
    if [ -z "$XX_APK_KEEP_BINARIES" ]; then
      rm -rf "/${XX_TRIPLE:?}/usr/bin/*"
    fi
    if [ -n "$iscompilerrt" ]; then
      for f in $(apk --root "$root" info -qL "$iscompilerrt" | grep 'clang_rt.'); do
        ff="/${f}"
        if [ ! -f "${ff}" ]; then
          mkdir -p "$(dirname "${ff}")"
          ln -s "/$(xx-info)/${f}" "${ff}"
        fi
      done
    fi
    # rust stdlib is accessed from the real root
    if [ -n "$isrustlib" ] && [ -d "$root/usr/lib/rustlib/$(xx-info)" ]; then
      ln -s "$root/usr/lib/rustlib/$(xx-info)" "/usr/lib/rustlib/$(xx-info)" || true
    fi
  fi
}

versionGTE() { test "$(printf '%s\n' "$@" | sort -V | tail -n 1)" = "$1"; }

supportRiscV() {
  versionGTE "$(xx-info os-version | cut -d'.' -f1-2)" "3.20"
}

supportLoong64() {
  versionGTE "$(xx-info os-version | cut -d'.' -f1-2)" "3.21"
}

case "$1" in
  "setup")
    setup
    ;;
  "clean")
    clean
    ;;
  *)
    cmd "$@"
    ;;
esac
